import de.vandermeer.asciitable.AsciiTable;
import de.vandermeer.skb.interfaces.transformers.textformat.TextAlignment;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {

        SubGrabber laboon = new SubGrabber();
        List<Submission> lsubs =  laboon.get("CKasper", 40);

        Submission[] subs = lsubs.stream()
                .filter((s)-> s.verdict.contains("Ac")) //get AC submissions only
                .toArray(Submission[]::new);

        AsciiTable table = new AsciiTable();
        table.addRule();
        for(Submission sub : subs) {
            table.addRow(sub.srcNumber, sub.when, sub.who, sub.problemName, sub.lang, sub.verdict).setTextAlignment(TextAlignment.CENTER);
            table.addRule();
        }

        System.out.println(table.render(150));
    }
}

//each object of that class is for one person
class SubGrabber {

    private final String CODEFORCES_URL = "http://codeforces.com";
    private final String SUBMISSION_URL = "/submissions/%s/page/%d";

    private List<Submission> subs;

    public List<Submission> get(){
        return this.subs;
    }

    public List<Submission> get(String name, int numberOfSubmissions){

        if(subs == null)
            subs = new ArrayList<>();

        try {

            int pagesCount = getPagesCount(name);
            for(int page = 1; page <= pagesCount; ++page) {

                String url = CODEFORCES_URL + String.format(SUBMISSION_URL, name, page);
                Document doc = Jsoup.connect(url).get();
                Elements submissionTable = doc
                        .select("table[class=status-frame-datatable]")
                        .select("tbody")
                        .select("tr");

                boolean done = add(submissionTable, numberOfSubmissions);
                if(done) break;
            }

        } catch (IOException e) {
            System.err.println("Error while getting submissions for " + name);
            System.err.println("Check your internet connection");
            e.printStackTrace();
        }

        return subs;
    }

    private int getPagesCount(String name) throws IOException {
        int maxCnt = 0;
        String url = CODEFORCES_URL + String.format(SUBMISSION_URL, name, 1);

        Document doc = Jsoup.connect(url).get();
        Elements pages = doc.select("div[class=pagination]").select("ul").select("li");

        for(Element e : pages)
            if(e.text().matches("^[0-9]+$"))
                maxCnt = Math.max(maxCnt, Integer.parseInt(e.text()));

        return maxCnt;
    }

    private boolean add(Elements submissionTable, int numberOfSubmissions) {

        for (int row = 1; row < submissionTable.size(); ++row) {
            Submission sub = construct(submissionTable.get(row).select("td"));

            if(!subs.contains(sub))
                subs.add(sub);

            //done getting submission
            if(subs.size() == numberOfSubmissions) return true;
        }

        return false;
    }

    private Submission construct(Elements row) {

        return new Submission(
                row.get(0).text(),
                row.get(1).text(),
                row.get(2).text(),
                row.get(3).text(),
                CODEFORCES_URL + row.get(3).selectFirst("a").attr("href"),
                row.get(4).text(),
                row.get(5).text(),
                row.get(6).text(),
                row.get(7).text());
    }
}

class Submission {

    public final String srcNumber, when, who, problemName, problemUrl, lang, verdict, time, memory;

    public Submission(String srcNumber, String when, String who,
                      String problemName, String problemUrl, String lang, String verdict, String time, String memory) {

        this.srcNumber = srcNumber;
        this.when = when;
        this.who = who;
        this.problemName = problemName;
        this.problemUrl = problemUrl;
        this.lang = lang;
        this.verdict = verdict;
        this.time = time;
        this.memory = memory;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Submission that = (Submission) o;
        return Objects.equals(srcNumber, that.srcNumber) &&
                Objects.equals(when, that.when);
    }

    @Override
    public int hashCode() {
        return Objects.hash(srcNumber, when);
    }
}
